1. 수정, 삭제 API의 request를 어떤 방식으로 사용했나요? (param, query, body)
A: 공통적으로 id의 경우, @PathVariable을 통해 url로 전달하였다.
수정 request의 경우, 사용자로부터 입력받는 데이터가 Memo Entity 생성자와 일치하기 때문에 JSON형태로 받아와
객체로 자동 변환하여 만들어주는 @RequestBody 형태로 사용하였다.
삭제 request의 경우, password만을 넘겨주기 때문에 간단한 Requestparam이나 PathVaraibleMemo을 고려했지만
패스워드가 같은 중요 데이터 값을 url에 표시하는 것이 좋지않아서 json body로 데이터를 넘기도록 하였다.
Entity객체에서 password만을 생성하는 객체가 아니므로, 별도의 Map 객체로 받아서 값을 받아왔다.


2. 어떤 상황에 어떤 방식의 request를 써야하나?
A: 데이터를 조회하는 경우 GET, 데이터를 추가하는 경우 POST, 데이터를 수정하는 경우 PUT, 데이터를 삭제하는 경우 DELETE

3. RESTful한 API를 설계하였나? 어떤 부분이 그렇고, 어떤 부분이 그렇지 않은지
A: Controller, Service, Repository로 3계층을 나누어 Controller는 데이터의 전달, Service는 데이터의 가공, Repository는 데이터베이스의 관리를
담당할 수 있도록 기능들을 분리하여 코드를 작성하였다. 요청받는 url의 형식을 통일하였고, 요청에 맞는 API를 지정하였다.

4. 적절한 관심사 분리를 적용하였나요? (controller, Repository, Service)
A: controller에는 데이터의 전달을 담당하는 기능만, Service에는 데이터의 가공, 로직 수행을 위한 코드만, Repository에는 데이터베이스에서
처리할 수 있는 기능으로 분리하여 코드를 작성하였다.

5. API 명세서
[]
